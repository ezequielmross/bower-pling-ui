{"version":3,"sources":["main.js","app.module.js","components/#template_demo/myComponentSample.js","components/plgDataTable/plgDataTable.js","components/plgDataTableFilters/plgDataTableFilters.js","components/plgDataTableSearch/plgDataTableSearch.js","components/plgSetFocus/plgSetFocus.js","components/plgEditFabSpeedDial/plgEditFabSpeedDial.js","core/apis/cep-service.js","core/apis/coreapi-service.js","core/boot/bootstrapper.js","core/boot/index.js","core/boot/loader.js","core/caching/caching-service.js","core/commons/localstorage-service.js","core/commons/sessionstorage-service.js","core/debugging/error-handler.js","core/debugging/logger.js","app.templates.js"],"names":["context","pling","window","PlingUiConfig","$provide","decorator","$delegate","shadowLogger","PlingUiRun","options","$injector","cache","onRun","cacheViews","get","angular","module","config","run","directive","restrict","controller","templateUrl","link","$scope","element","attrs","css","tagline","PlgDataTable","$log","$compile","$location","$http","$rootScope","core","scope","params","serviceModule","dynamicForm","filterDefault","orderBy","limit","page","total","viewItems","gapiDataTableFilters","paginate","replace","builder","compiledElm","buildTemplate","cb","template","selected","chkList","editView","this","toggleAll","allActions","autoSelect","boundaryLinks","largeEditDialog","pageSelector","rowSelection","query","order","path","id","length","method","action","msg","payload","forEach","obj","index","patch","getAppCoreUrl","collection","_id","success","data","$emit","err","warn","postCompile","replaceWith","$inject","PlgDataTableFilters","formatResultList","actionsList","subModuleEdit","resultViewItems","param","label","item","getParam","PlgDataTableSearch","serializeQueryString","searchPeople","searchColorActive","searchColorInactivate","colorIconsTrash","search","searchIconsTrash","searchIconsActive","searchIconsInactivate","p","str","hasOwnProperty","encodeURIComponent","push","join","active","inactive","trash","$parse","$timeout","model","plgSetFocus","$watch","value","focus","bind","$apply","assign","PlgEditFabSpeedDial","service","getCep","cep","uri","cep_url","base_core_url","core_url","def_api_version","def_api_app","accounts_url","application_name","getAccountsCoreUrl","getDriveCoreUrl","getAccountsUrl","getApplicationName","charAt","toUpperCase","slice","logger","Bootstrapper","isBootstrapped","prototype","Angular","root","appname","source","self","loader","load","debug","bootstrap","boot","console","dom","onDOMLoaded","filter","querySelector","name","getAttribute","info","error","addEventListener","document","ConfLoader","settings","filepath","parsed","xhr","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","onerror","open","setRequestHeader","send","CachingService","$templateCache","$route","cacheObj","routeObj","partial","r","viewCache","router","routes","$window","remove","localStorage","clear","set","key","setObject","stringify","getObject","sessionStorage","PlingUiExceptionHandler","exception","cause","dispatcher","details","$broadcast","factory","PlingUiLogger","dispatch","arg","proc","log","stamp","Date","toString","prefix","apply","arguments","put"],"mappings":"CACA,SAAAA,GACA,YAGAA,GAAAC,UACAC,QCLA,WACA,YAGA,SAAAC,GAAAC,GACAA,EAAAC,UAAA,OAAA,SAAAC,EAAAC,GACA,MAAAA,GAAAD,KAKA,QAAAE,GAAAC,EAAAC,GACA,GAAAC,GAAA,IAEAF,GAAAG,OAAAH,EAAAG,MAAAC,aACAF,EAAAD,EAAAI,IAAA,gBACAH,EAAAE,cAKAE,QAAAC,OAAA,WAAA,oBAAA,aAAA,aACAD,QAAAC,OAAA,WAAAC,QAAA,WAAAd,IACAY,QAAAC,OAAA,WAAAE,KAAA,eAAA,YAAAV,OCnBA,WACA,YAIAO,SAAAC,OAAA,WAAAG,UAAA,YAAA,WAEA,OAGAC,SAAA,IAGAC,WAAA,eAIAC,YAAA,yBAGAC,KAAA,SAAAC,EAAAC,EAAAC,GAEAD,EAAAE,IAAA,mBAAA,SACAH,EAAAI,QAAA,oBAAAF,SC3BA,WACA,YAGA,SAAAG,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OACAf,SAAA,IACAgB,OACAC,OAAA,IACAC,cAAA,IACAC,YAAA,IACAC,cAAA,IACAC,QAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,UAAA,IACAC,qBAAA,IACAC,SAAA,KAEAC,SAAA,EAGAzB,KAAA,SAAAa,EAAAX,GAEA,GAAAwB,GAAAC,CAGAd,GAAAC,SACAY,GACAE,cAAA,SAAAf,EAAAgB,GACA,GAAAC,EAEAjB,GAAAkB,YACAlB,EAAAmB,SAAA,EAGAnB,EAAAoB,SAAAC,KAAAD,SACApB,EAAAsB,UAAAD,KAAAC,UACAtB,EAAAuB,WAAAF,KAAAE,WAGAvB,EAAA3B,SACAmD,YAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,cAAA,EACAC,cAAA,GAIA5B,EAAA6B,OACAC,MAAA9B,EAAAK,SAIAY,EAAA,+4DAuCAD,EAAA,KAAAC,IAGAG,SAAA,SAAAW,EAAAC,GACApC,EAAAmC,KAAAA,EAAA,IAAAC,IAIAV,UAAA,WACAtB,EAAAmB,SAAA,EACAnB,EAAAkB,SAAAe,OAAA,IACAjC,EAAAmB,SAAA,IAKAI,WAAA,SAAAW,EAAAC,EAAAC,GAEA,GAAAC,KAEAA,GAAAH,GAAAC,EAGAnC,EAAAkB,SAAAoB,QAAA,SAAAC,EAAAC,GAEA3C,EAAA4C,MAAA1C,EAAA2C,gBAAA1C,EAAAE,cAAAyC,WAAA,IAAAJ,EAAAK,IAAAP,GACAQ,QAAA,SAAAC,GACAA,GACAN,EAAA,IAAAxC,EAAAkB,SAAAe,QACAnC,EAAAiD,MAAA,oBAAA,aAAAX,EAAA,iBAEApC,EAAAkB,SAAAe,OAAA,EACAjC,EAAAmB,SAAA,EACArB,EAAAiD,MAAA,YAAAR,GAAAL,EAAAC,IAEArC,EAAAiD,MAAA,cAAA,sBAAAX,SAUAvB,EAAAE,cAAAf,EAAA,SAAAgD,EAAA/B,GAGA,MAAA+B,OACAtD,GAAAuD,KAAAD,IAKAlC,EAAAnB,EAAAsB,GAAAjB,GAGAa,EAAAqC,aACArC,EAAAqC,YAAApC,OAIAzB,GAAA8D,YAAArC,SASArB,EAAA2D,SAAA,OAAA,WAAA,YAAA,QAAA,aAAA,kBAGAzE,QAAAC,OAAA,WAAAG,UAAA,eAAAU,MCzKA,WACA,YAGA,SAAA4D,GAAAvD,EAAAJ,EAAAC,EAAAE,EAAAE,EAAAuD,GACA,OACAtE,SAAA,IACAgB,OACAC,OAAA,IACAC,cAAA,IACAC,YAAA,IACAC,cAAA,KAEAQ,SAAA,EAGAzB,KAAA,SAAAa,EAAAX,GAEA,GAAAwB,GAAAC,CAGAd,GAAAC,SACAY,GACAE,cAAA,SAAAf,EAAAgB,GACA,GAAAC,EAGAjB,GAAAuD,YAAAlC,KAAAkC,YAIAvD,EAAA2C,WAAA3C,EAAAE,cAAAyC,WACA3C,EAAApB,OAAAoB,EAAAE,cAAAtB,OACAoB,EAAAE,cAAAsD,gBACAxD,EAAApB,OAAAoB,EAAAE,cAAAtB,OAAA,IAAAoB,EAAAE,cAAAsD,eAGAxD,EAAAyD,gBAAAH,EAAAnB,OAAAnC,EAAAI,cAAA+B,OAAAnC,EAAAE,cAAAO,WAGAQ,EAAA,2zBAkBAD,EAAA,KAAAC,IAGAsC,YAAA,SAAAG,EAAAC,EAAAC,EAAAjB,GACA,GACAkB,GADAxB,IAIAwB,GAAAH,EAAAd,IAEAP,EAAAuB,EAAA1B,QAAA0B,EAAAzB,OAEAtC,EAAA4C,MAAA1C,EAAA2C,gBAAAC,EAAA,IAAAkB,EAAAxB,GACAQ,QAAA,SAAAC,GACAA,GACAhD,EAAAiD,MAAA,oBAAAY,EAAA,IAAAC,EAAAxB,IAAA,iBACAtC,EAAAiD,MAAA,YAAAW,GAAAE,EAAA1B,OAAA0B,EAAAzB,SAEArC,EAAAiD,MAAA,cAAA,sBAAAa,EAAAxB,IAAA,IAAAO,OAQA9B,EAAAE,cAAAf,EAAA,SAAAgD,EAAA/B,GAGA,MAAA+B,OACAtD,GAAAuD,KAAAD,IAKAlC,EAAAnB,EAAAsB,GAAAjB,GAGAa,EAAAqC,aACArC,EAAAqC,YAAApC,OAIAzB,GAAA8D,YAAArC,SASAuC,EAAAD,SAAA,aAAA,OAAA,WAAA,QAAA,iBAAA,oBAGAzE,QAAAC,OAAA,WAAAG,UAAA,sBAAAsE,MCjHA,WACA,YAGA,SAAAS,GAAApE,EAAAC,EAAAG,GACA,OACAd,SAAA,IACAgB,OACAG,YAAA,KAEAS,SAAA,EAGAzB,KAAA,SAAAa,EAAAX,GAEA,GAAAwB,GAAAC,CAEAD,IACAE,cAAA,SAAAf,EAAAgB,GAEA,GAAAC,EAEAjB,GAAA+D,qBAAA1C,KAAA0C,qBACA/D,EAAAgE,aAAA3C,KAAA2C,aACAhE,EAAAiE,kBAAA5C,KAAA4C,kBACAjE,EAAAkE,sBAAA7C,KAAA6C,sBACAlE,EAAAmE,gBAAA9C,KAAA8C,gBAGAnE,EAAAoE,UACApE,EAAAqE,iBAAA,0BACArE,EAAAsE,kBAAA,0BACAtE,EAAAuE,sBAAA,0BAGAtD,EAAA,0+CAkCAD,EAAA,KAAAC,IAGA8C,qBAAA,SAAAxB,GACA,GACAiC,GADAC,IAGA,KAAAD,IAAAjC,GACAA,EAAAmC,eAAAF,IAAAG,mBAAApC,EAAAiC,KACAC,EAAAG,KAAAD,mBAAAH,GAAA,IAAAG,mBAAApC,EAAAiC,IAIA,OAAAC,GAAAxC,OAAA,EACA,IAAAwC,EAAAI,KAAA,KAGAJ,EAAAI,KAAA,MAGAb,aAAA,SAAAI,GACAtE,EAAAiD,MAAA,eAAA/C,EAAA+D,qBAAAK,KAGAH,kBAAA,WACA,4BAAAjE,EAAAsE,mBACAtE,EAAAsE,kBAAA,yBACAtE,EAAAoE,OAAAU,QAAA,IAEA9E,EAAAsE,kBAAA,gCACAtE,GAAAoE,OAAAU,SAIAZ,sBAAA,WACA,4BAAAlE,EAAAuE,uBACAvE,EAAAuE,sBAAA,yBACAvE,EAAAoE,OAAAW,UAAA,IAEA/E,EAAAuE,sBAAA,gCACAvE,GAAAoE,OAAAW,WAIAZ,gBAAA,WACA,4BAAAnE,EAAAqE,kBACArE,EAAAqE,iBAAA,yBACArE,EAAAoE,OAAAY,OAAA,IAEAhF,EAAAqE,iBAAA,gCACArE,GAAAoE,OAAAY,SAMAnE,EAAAE,cAAAf,EAAA,SAAAgD,EAAA/B,GAGA,MAAA+B,OACAtD,GAAAuD,KAAAD,IAKAlC,EAAAnB,EAAAsB,GAAAjB,GAGAa,EAAAqC,aACArC,EAAAqC,YAAApC,OAIAzB,GAAA8D,YAAArC,QAQAgD,EAAAV,SAAA,OAAA,WAAA,cAGAzE,QAAAC,OAAA,WAAAG,UAAA,qBAAA+E,MCzJA,WACA,YAEAnF,SAAAC,OAAA,WAAAG,UAAA,eAAA,SAAA,WAAA,SAAAkG,EAAAC,GAEA,OACAlG,SAAA,IACA4B,SAAA,EACAzB,KAAA,SAAAC,EAAAC,EAAAC,GAEA,GAAA6F,GAAAF,EAAA3F,EAAA8F,YAEAhG,GAAAiG,OAAAF,EAAA,SAAAG,GACAA,KAAA,GACAJ,EAAA,WACA7F,EAAA,GAAAkG,YAKAlG,EAAAmG,KAAA,OAAA,WACApG,EAAAqG,OAAAN,EAAAO,OAAAtG,GAAA,cCrBA,WACA,YAEA,SAAAuG,KAEA,OACA3G,SAAA,IACAC,WAAA,gCACAC,YAAA,yBACA0B,SAAA,EACAzB,KAAA,SAAAa,GACAA,EAAAR,QAAA,cAMAb,QAAAC,OAAA,WAAAG,UAAA,sBAAA4G,MCjBA,WACA,YAEAhH,SAAAC,OAAA,WAAAgH,QAAA,cAAA,QAAA,eAAA,SAAA/F,EAAAxB,GAEAgD,KAAAwE,OAAA,SAAAC,GACA,GAAAC,GAAA1H,EAAA2H,QAAAF,CACA,OAAAjG,GAAAnB,IAAAqH,UCPA,WACA,YAEApH,SAAAC,OAAA,WAAAgH,QAAA,kBAAA,eAAA,SAAAvH,GAEA,GAAA4H,GAAA5H,EAAA6H,SAAA7H,EAAA8H,gBAAA,IAAA9H,EAAA+H,YAAA,IACAC,EAAAhI,EAAAgI,aACAC,EAAAjI,EAAA+H,WAGA/E,MAAAqB,cAAA,WACA,MAAAuD,IAGA5E,KAAAkF,mBAAA,WACA,MAAAlI,GAAA6H,SAAA7H,EAAA8H,gBAAA,cAGA9E,KAAAmF,gBAAA,WACA,MAAAnI,GAAA6H,SAAA7H,EAAA8H,gBAAA,WAIA9E,KAAAoF,eAAA,WACA,MAAAJ,IAIAhF,KAAAqF,mBAAA,WACA,MAAAJ,GAAAK,OAAA,GAAAC,cAAAN,EAAAO,MAAA,UC7BA,SAAAjJ,EAAAkJ,GACA,YAGA,SAAAC,KACA1F,KAAA2F,gBAAA,EAIAD,EAAAE,UAAAC,QAAA,SAAAC,EAAAC,EAAAC,EAAArG,GACA,GAAAsG,GAAAjG,IAGAzD,GAAA2J,OAAAC,KAAAH,EAAA,SAAArE,EAAA3E,GAEA2E,GACA8D,EAAA7D,KAAA,2BACA6D,EAAAW,MAAAzE,IAIArE,QAAAC,OAAAwI,GAAA9B,MAAA,eAAAjH,GAIAM,QAAA+I,UAAAP,GAAAC,IACAE,EAAAN,gBAAA,EAGAhG,GACAA,EAAAgC,MAMApF,EAAA+J,KAAA,GAAAZ,IAEAjJ,OAAAD,MAAAC,OAAA8J,SCtCA,SAAAC,EAAAf,EAAAlJ,GACA,YAGA,SAAAkK,KAGA,GAAAX,GACApI,EAAA,UACAsI,EAAA,MACAU,EAAA,IAAAhJ,EAAA,GAGAoI,GAAAU,EAAAG,cAAAD,GAGAZ,GAGAvJ,EAAAqK,KAAAd,EAAAe,aAAAnJ,GACAnB,EAAAyJ,OAAAF,EAAAe,aAAAb,IAAA,kBAGAP,EAAAqB,KAAA,4BAAA,GACAvK,EAAA+J,KAAAT,QAAAC,EAAAvJ,EAAAqK,KAAArK,EAAAyJ,OAAA,SAAArE,GAEAA,EACA8D,EAAAsB,MAAA,sBAAAxK,EAAAqK,MAEAnB,EAAAqB,KAAA,gBAAAvK,EAAA+J,KAAAX,mBAMAF,EAAAqB,KAAA,4BAAA,GAIAN,EAAAQ,iBAAA,mBAAAP,IAEAQ,SAAAxK,OAAA8J,QAAA9J,OAAAD,OCzCA,SAAAD,GACA,YAEA,SAAA2K,KACAlH,KAAAmH,SAAA,KAIAD,EAAAtB,UAAAO,KAAA,SAAAiB,EAAAzH,GACA,GACA0H,GADApB,EAAAjG,KAEAsH,EAAA,GAAAC,eAGAD,GAAAE,mBAAA,WACA,IAAAF,EAAAG,aACA,MAAAH,EAAAI,QAEAL,EAAAM,KAAAC,MAAAN,EAAAO,cACA5B,EAAAkB,SAAAE,EAEA1H,EAAA,KAAA0H,IAEA1H,EAAA,+BAAA2H,EAAAI,aAMAJ,EAAAQ,QAAA,SAAAnG,GACAhC,EAAAgC,IAIA2F,EAAAS,KAAA,MAAAX,GAAA,GACAE,EAAAU,iBAAA,eAAA,kCACAV,EAAAW,QAIA1L,EAAA2J,OAAA,GAAAgB,IACAzK,OAAAD,OCzCA,WACA,YAEA,SAAA0L,GAAAC,EAAAC,EAAA5J,GAGAwB,KAAA5C,WAAA,SAAAiL,EAAAC,GAEA,GAAAC,GAAAC,EACAC,EAAAJ,GAAAF,EACAO,EAAAJ,GAAAF,CAGA,KAAAI,IAAAE,GAAAC,OAEAD,EAAAC,OAAAtF,eAAAmF,KAEAD,EAAAG,EAAAC,OAAAH,GAAA3K,YACA0K,GAEA/J,EAAAnB,IAAAkL,GAAArL,MAAAuL,MAOAP,EAAAnG,SAAA,iBAAA,SAAA,SAGAzE,QAAAC,OAAA,WAAAgH,QAAA,eAAA2D,MC9BA,WACA,YAEA5K,SAAAC,OAAA,WAAAgH,QAAA,iBAAA,UAAA,SAAAqE,GACA,OACAC,OAAA,WACAD,EAAAE,aAAAC,SAEAC,IAAA,SAAAC,EAAAhF,GACA2E,EAAAE,aAAAG,GAAAhF,GAEA5G,IAAA,SAAA4L,GACA,MAAAL,GAAAE,aAAAG,IAEAC,UAAA,SAAAD,EAAAhF,GACA2E,EAAAE,aAAAG,GAAAtB,KAAAwB,UAAAlF,IAEAmF,UAAA,SAAAH,GACA,MAAAtB,MAAAC,MAAAgB,EAAAE,aAAAG,IAAA,cClBA,WACA,YAEA3L,SAAAC,OAAA,WAAAgH,QAAA,mBAAA,UAAA,SAAAqE,GACA,OACAC,OAAA,WACAD,EAAAS,eAAAN,SAEAC,IAAA,SAAAC,EAAAhF,GACA2E,EAAAS,eAAAJ,GAAAhF,GAEA5G,IAAA,SAAA4L,GACA,MAAAL,GAAAS,eAAAJ,IAEAC,UAAA,SAAAD,EAAAhF,GACA2E,EAAAS,eAAAJ,GAAAtB,KAAAwB,UAAAlF,IAEAmF,UAAA,SAAAH,GACA,MAAAtB,MAAAC,MAAAgB,EAAAS,eAAAJ,IAAA,cClBA,WACA,YAGA,SAAAK,GAAArM,GAEA,MAAA,UAAAsM,EAAAC,GAGA,GAAAC,GAAA,KACAhE,EAAA,KACAhE,GACAsF,MAAAwC,EACAG,QAAAF,EAIA/D,GAAAxI,EAAAI,IAAA,QACAoI,EAAAsB,MAAAwC,GAEAC,GACA/D,EAAAW,MAAAoD,GAIAC,EAAAxM,EAAAI,IAAA,cACAoM,EAAAE,WAAA,yBAAAlI,IAKA6H,EAAAvH,SAAA,aAGAzE,QACAC,OAAA,WACAqM,QAAA,oBAAAN,MCpCA,WACA,YAGA,SAAAO,KACA,MAAA,UAAAhN,GACA,OACAiN,SAAA,SAAAjJ,EAAAjC,GAEA,GAIAmL,GAJAC,EAAAnN,EAAAgE,IAAAhE,EAAAoN,IACAC,GAAA,GAAAC,OAAAC,WACAC,EAAA,IAAAH,EAAA,KAAArJ,EAAA,MACAE,IAGA,IAAAF,EAAA,CAEAE,EAAAwC,KAAA8G,EAGA,KAAAN,IAAAnL,GACAA,EAAAyE,eAAA0G,IACAhJ,EAAAwC,KAAA3E,EAAAmL,GAKAC,GAAAM,MAAA,KAAAvJ,KAIAkJ,IAAA,WACAjK,KAAA8J,SAAA,MAAAS,YAGAzD,KAAA,WACA9G,KAAA8J,SAAA,OAAAS,YAGAxD,MAAA,WACA/G,KAAA8J,SAAA,QAAAS,YAGA3I,KAAA,WACA5B,KAAA8J,SAAA,OAAAS,cAOAjN,QACAC,OAAA,WACAqM,QAAA,eAAAC,MCtDAvM,QAAAC,OAAA,wBAAAE,KAAA,iBAAA,SAAA0K,GAAAA,EAAAqC,IAAA,yBAAA,yFACArC,EAAAqC,IAAA,oCAAA","file":"pling-ui.min.js","sourcesContent":["/*global window*/\n(function (context) {\n    \"use strict\";\n\n    // starting global context\n    context.pling = {};\n}(window));\n","/*global angular */\n(function () {\n    \"use strict\";\n\n    // Config method\n    function PlingUiConfig($provide) {\n        $provide.decorator(\"$log\", function ($delegate, shadowLogger) {\n            return shadowLogger($delegate);\n        });\n    }\n\n    // Run method\n    function PlingUiRun(options, $injector) {\n        var cache = null;\n\n        if (options.onRun && options.onRun.cacheViews) {\n            cache = $injector.get(\"cacheService\");\n            cache.cacheViews();\n        }\n    }\n\n    // registering on angular\n    angular.module('plingUi', ['plingUi.templates', 'ngMaterial', 'datetime' ]);\n    angular.module(\"plingUi\").config([\"$provide\", PlingUiConfig]);\n    angular.module(\"plingUi\").run([\"boot.options\", \"$injector\", PlingUiRun]);\n}());\n","/*global angular*/\n\n/* More about AngularJS Directives:\n    http://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-i-the-fundamentals */\n\n(function () {\n    \"use strict\";\n    /*\n        AQUI SE CRIA A DIRETIVA\n    */\n    angular.module('plingUi').directive('plgSample', function () {\n\n        return {\n\n            // E = element, A = attribute, C = class, M = comment\n            restrict    : 'E',\n\n            // Your Controller\n            controller  : 'MyController',\n\n            // Your HTML Template\n            // You can also use 'template': <div>{{yourScopeVar}}</div>' intead of 'templateUrl'\n            templateUrl : 'myComponentSample.html',\n\n            // DOM manipulation\n            link : function ($scope, element, attrs) {\n\n                element.css('background-color', 'white');\n                $scope.tagline = \"it Works! Attrs: \" + attrs;\n\n            }\n        };\n\n    });\n}());\n","/*global angular, console, document, $, window, URL*/\n(function () {\n    'use strict';\n\n    // creating directive\n    function PlgDataTable($log, $compile, $location, $http, $rootScope, core) {\n        return {\n            restrict: 'E',\n            scope: {\n                params: '=',\n                serviceModule: '=',\n                dynamicForm: '=',\n                filterDefault: '=',\n                orderBy: '=',\n                limit: '=',\n                page: '=',\n                total: '=',\n                viewItems: '=',\n                gapiDataTableFilters: '=',\n                paginate: '&'\n            },\n            replace: true,\n\n            // linking directive\n            link: function (scope, element) {\n\n                var builder, compiledElm;\n\n                // validating bind value\n                if (scope.params) {\n                    builder = {\n                        buildTemplate: function (scope, cb) {\n                            var template;\n\n                            scope.selected  = []; // DataTable - Checkbox\n                            scope.chkList   = false;\n\n\n                            scope.editView      = this.editView;\n                            scope.toggleAll     = this.toggleAll;\n                            scope.allActions    = this.allActions;\n\n\n                            scope.options = {\n                                autoSelect: false,\n                                boundaryLinks: false,\n                                largeEditDialog: false,\n                                pageSelector: false,\n                                rowSelection: true\n                            };\n\n                            // input init orderBy... ex: name, type_ip, etc...\n                            scope.query = {\n                                order: scope.orderBy\n                            };\n\n\n                            template =  '<md-content layout=\"column\" flex>' +\n                                        '   <md-table-container>' +\n                                        '       <table md-table md-row-select=\"options.rowSelection\" ng-model=\"selected\" md-progress=\"promise\" ng-click=\"toggleAll()\">' +\n                                        '       <thead md-head md-order=\"query.order\" md-on-reorder=\"logOrder\">' +\n                                        '           <tr md-row>' +\n                                        '               <th md-column md-order-by=\"{{ header.ref }}\" ng-repeat=\"header in dynamicForm.showInList\"><span>{{ header.label }}</span></th>' +\n                                        '           </tr>' +\n                                        '       </thead>' +\n                                        '       <tbody md-body>' +\n                                        '           <tr md-row md-select=\"obj\" md-on-select=\"toggleAll\" md-on-deselect=\"toggleAll\" ng-click=\"editView(serviceModule.module, obj._id)\" md-on-select=\"logItem\" md-auto-select=\"options.autoSelect\" ng-repeat=\"obj in params | filter: filter.search | orderBy: query.order\" style=\"cursor: pointer !important\">' +\n                                        '               <td md-cell ng-repeat=\"item in dynamicForm.showInList\">{{obj[item.ref]}}</md-cell>' +\n                                        '               <td md-cell ng-show=\"gapiDataTableFilters\">' +\n\n                                        '                   <plg-data-table-filters' +\n                                        '                       params=\"obj\"' +\n                                        '                       service-module=\"serviceModule\"' +\n                                        '                       dynamic-form=\"dynamicForm\"' +\n                                        '                       filter-default=\"filterDefault\">' +\n                                        '                   </plg-data-table-filters>' +\n\n                                        '               </td>' +\n                                        '           </tr>' +\n                                        '       </tbody>' +\n                                        '       </table>' +\n                                        '   </md-table-container>' +\n\n                                        '   <md-table-pagination md-limit=\"limit\" md-page=\"page\" md-total=\"{{total}}\" md-on-paginate=\"paginate()\"></md-table-pagination>' +\n\n                                        '   <div layout=\"row\" layout-align=\"start start\" class=\"actionDataTable\">' +\n                                        '       <md-menu-item ng-show=\"chkList\" ng-repeat=\"item in viewItems\" layout-align=\"center center\">' +\n                                        '           <md-button class=\"md-icon-button allActionsIcon\" aria-label=\"Ações\" ng-click=\"allActions(item.method, item.action, item.msg)\">' +\n                                        '               <md-tooltip>{{item.name}}</md-tooltip>' +\n                                        '               <md-icon md-svg-src=\"{{item.moduleIcon}}\" class=\"icons\"></md-icon>' +\n                                        '           </md-button>' +\n                                        '       </md-menu-item>' +\n                                        '   </div>' +\n                                        '</md-content>';\n\n\n                            cb(null, template);\n                        },\n\n                        editView : function (path, id) {\n                            $location.path(path + '/' + id);\n                        },\n\n                        // Display \"show / hide\" buttons, ex: Inativar, Excluir...\n                        toggleAll : function () {\n                            scope.chkList = false;\n                            if (scope.selected.length > 0) {\n                                scope.chkList = true;\n                            }\n                        },\n\n                        // Execute actions ex: Inativar, Excluir...\n                        allActions : function (method, action, msg) {\n\n                            var payload = {};\n\n                            payload[method] = action;\n\n\n                            scope.selected.forEach(function (obj, index) {\n                                /*jslint nomen:true*/\n                                $http.patch(core.getAppCoreUrl() + scope.serviceModule.collection + '/' + obj._id, payload)\n                                    .success(function (data) {\n                                        if (data) {\n                                            if (index + 1  === scope.selected.length) {\n                                                $rootScope.$emit('saveRecordSuccess', 'Registros ' + msg + ' com sucesso.');\n                                            }\n                                            scope.selected.length = 0; // Reset \"CHECKBOX checked\"\n                                            scope.chkList = false;\n                                            $rootScope.$emit('research', [obj], method, action);\n                                        } else {\n                                            $rootScope.$emit('recordError', 'Ocorreu um erro ao ' + msg);\n                                        }\n                                    });\n                                /*jslint nomen:false*/\n                            });\n                        }\n\n                    };\n\n                    // defining template\n                    builder.buildTemplate(scope, function (err, template) {\n\n                        // handling error\n                        if (err) {\n                            $log.warn(err);\n                            return;\n                        }\n\n                        // compiling template\n                        compiledElm = $compile(template)(scope);\n\n                        // handling post compile hooks\n                        if (builder.postCompile) {\n                            builder.postCompile(compiledElm);\n                        }\n\n                        // replacing into DOM\n                        element.replaceWith(compiledElm);\n\n                    });\n                }\n            }\n        };\n    }\n\n    // injecting dependencies\n    PlgDataTable.$inject = ['$log', '$compile', '$location', '$http', '$rootScope', 'coreApiService'];\n\n    // registering into angular\n    angular.module('plingUi').directive('plgDataTable', PlgDataTable);\n}());","/*global angular, console, document, $, window, URL*/\n(function () {\n    'use strict';\n\n    // creating directive\n    function PlgDataTableFilters($rootScope, $log, $compile, $http, core, formatResultList) {\n        return {\n            restrict: 'E',\n            scope: {\n                params: '=',\n                serviceModule: '=',\n                dynamicForm: '=',\n                filterDefault: '='\n            },\n            replace: true,\n\n            // linking directive\n            link: function (scope, element) {\n\n                var builder, compiledElm;\n\n                // validating bind value\n                if (scope.params) {\n                    builder = {\n                        buildTemplate: function (scope, cb) {\n                            var template;\n\n\n                            scope.actionsList = this.actionsList;\n\n\n                            //---------------------\n                            scope.collection    = scope.serviceModule.collection;\n                            scope.module        = scope.serviceModule.module;\n                            if (scope.serviceModule.subModuleEdit) {\n                                scope.module    = scope.serviceModule.module + '/' + scope.serviceModule.subModuleEdit;\n                            }\n\n                            scope.resultViewItems = formatResultList.action(scope.filterDefault.action, scope.serviceModule.viewItems);\n                            //---------------------\n\n                            template =  '<md-menu md-offset=\"0 -7\" md-position-mode=\"target-right target\">' +\n                                        '    <md-button aria-label=\"\" class=\"md-icon-button\" ng-click=\"$mdOpenMenu($event)\" >' +\n                                        '        <md-tooltip>Ações</md-tooltip>' +\n                                        '        <md-icon md-svg-src=\"assets/images/icone_mais.svg\"></md-icon>' +\n                                        '    </md-button>' +\n                                        '    <md-menu-content layout=\"column\" layout-wrap width=\"4\" >' +\n                                        '        <md-menu-item flex ng-show=\"module\">' +\n                                        '           <p><font color=\"#959595\">Alterar Status</font></p>' +\n                                        '        </md-menu-item>' +\n                                        '        <md-menu-item flex ng-repeat=\"item in resultViewItems\">' +\n                                        '            <md-button ng-click=\"actionsList(params, \\'Registro\\', item, collection)\" style=\"margin-left: 15px !important\">' +\n                                        '                 <md-icon md-svg-src=\"{{item.moduleIcon}}\"></md-icon>' +\n                                        '                 {{item.name}}' +\n                                        '            </md-button>' +\n                                        '        </md-menu-item>' +\n                                        '    </md-menu-content>' +\n                                        '</md-menu>';\n\n                            cb(null, template);\n                        },\n\n                        actionsList: function (param, label, item, collection) {\n                            var payload = {},\n                                getParam;\n\n                            /*jslint nomen:true*/\n                            getParam                = param._id;\n                            /*jslint nomen:false*/\n                            payload[item.method]    = item.action;\n\n                            $http.patch(core.getAppCoreUrl() + collection + '/' + getParam, payload)\n                                .success(function (data) {\n                                    if (data) {\n                                        $rootScope.$emit('saveRecordSuccess', label + ' ' + item.msg + ' com sucesso.');\n                                        $rootScope.$emit('research', [param], item.method, item.action);\n                                    } else {\n                                        $rootScope.$emit('recordError', 'Ocorreu um erro ao ' + item.msg + ' ' + collection);\n                                    }\n                                });\n                        }\n\n                    };\n\n                    // defining template\n                    builder.buildTemplate(scope, function (err, template) {\n\n                        // handling error\n                        if (err) {\n                            $log.warn(err);\n                            return;\n                        }\n\n                        // compiling template\n                        compiledElm = $compile(template)(scope);\n\n                        // handling post compile hooks\n                        if (builder.postCompile) {\n                            builder.postCompile(compiledElm);\n                        }\n\n                        // replacing into DOM\n                        element.replaceWith(compiledElm);\n\n                    });\n                }\n            }\n        };\n    }\n\n    // injecting dependencies\n    PlgDataTableFilters.$inject = ['$rootScope', '$log', '$compile', '$http', 'coreApiService', 'formatResultList'];\n\n    // registering into angular\n    angular.module('plingUi').directive('plgDataTableFilters', PlgDataTableFilters);\n}());\n","/*global angular, console, document, $, jQuery, window, URL*/\n(function () {\n    'use strict';\n\n    // creating directive\n    function PlgDataTableSearch($log, $compile, $rootScope) {\n        return {\n            restrict: 'E',\n            scope: {\n                dynamicForm: '='\n            },\n            replace: true,\n\n            // linking directive\n            link: function (scope, element) {\n\n                var builder, compiledElm;\n\n                builder = {\n                    buildTemplate: function (scope, cb) {\n\n                        var template;\n\n                        scope.serializeQueryString  = this.serializeQueryString;\n                        scope.searchPeople          = this.searchPeople;\n                        scope.searchColorActive     = this.searchColorActive;\n                        scope.searchColorInactivate = this.searchColorInactivate;\n                        scope.colorIconsTrash       = this.colorIconsTrash;\n\n\n                        scope.search                   = [];\n                        scope.searchIconsTrash         = 'checkOffColorIconFilter';\n                        scope.searchIconsActive        = 'checkOffColorIconFilter';\n                        scope.searchIconsInactivate    = 'checkOffColorIconFilter';\n\n\n                        template =  '<div flex=\"25\">' +\n                                    '    <md-input-container>' +\n                                    '        <label>Pesquisar</label>' +\n                                    '        <input ng-model=\"search.search\">' +\n                                    '    </md-input-container>' +\n                                    '</div>' +\n\n                                    '<div style=\"margin-left: 20px !important\" flex=\"25\">' +\n                                    '    <md-input-container>' +\n                                    '        <md-select multiple ng-model=\"search.fieldtable\" placeholder=\"Selecione\">' +\n                                    '            <md-option ng-repeat=\"table in dynamicForm.allField\" value=\"{{table.ref}}\">{{table.label}}</md-option>' +\n                                    '        </md-select>' +\n                                    '    </md-input-container>' +\n                                    '</div>' +\n\n                                    '<div style=\"margin-left: 20px !important\">' +\n                                    '    <md-input-container>' +\n                                    '        <md-button ng-class=\"searchIconsActive\" class=\"md-icon-button\" ng-click=\"searchColorActive()\">' +\n                                    '            <md-tooltip md-direction=\"bottom\">Ativos</md-tooltip>' +\n                                    '            <i class=\"material-icons\">done_all</i>' +\n                                    '        </md-button>' +\n                                    '        <md-button ng-class=\"searchIconsInactivate\" class=\"md-icon-button\" ng-click=\"searchColorInactivate()\">' +\n                                    '            <md-tooltip md-direction=\"bottom\">Inativos</md-tooltip>' +\n                                    '            <i class=\"material-icons\">highlight_off</i>' +\n                                    '        </md-button>' +\n                                    '        <md-button ng-class=\"searchIconsTrash\" class=\"md-icon-button\" ng-click=\"colorIconsTrash()\">' +\n                                    '            <md-tooltip md-direction=\"bottom\">Excluídos</md-tooltip>' +\n                                    '            <i class=\"material-icons\">delete</i>' +\n                                    '        </md-button>' +\n                                    '    </md-input-container>' +\n                                    '</div>' +\n\n                                    '<md-button ng-click=\"searchPeople(search)\" ng-show=\"search.search || search.fieldtable.length > 0 || search.active || search.inactive || search.trash\" class=\"md-raised\" style=\"font-size: 11px !important;\">Pesquisar</md-button>';\n\n                        cb(null, template);\n                    },\n\n                    serializeQueryString : function (obj) {\n                        var str = [],\n                            p;\n\n                        for (p in obj) {\n                            if (obj.hasOwnProperty(p) && encodeURIComponent(obj[p])) {\n                                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n                            }\n                        }\n\n                        if (str.length > 0) {\n                            return '&' + str.join(\"&\");\n                        }\n\n                        return str.join(\"&\");\n                    },\n\n                    searchPeople : function (search) {\n                        $rootScope.$emit('searchPeople', scope.serializeQueryString(search));\n                    },\n\n                    searchColorActive : function () {\n                        if (scope.searchIconsActive === 'checkOffColorIconFilter') {\n                            scope.searchIconsActive = 'checkOnColorIconFilter';\n                            scope.search.active     = true;\n                        } else {\n                            scope.searchIconsActive = 'checkOffColorIconFilter';\n                            delete scope.search.active;\n                        }\n                    },\n\n                    searchColorInactivate : function () {\n                        if (scope.searchIconsInactivate === 'checkOffColorIconFilter') {\n                            scope.searchIconsInactivate = 'checkOnColorIconFilter';\n                            scope.search.inactive       = true;\n                        } else {\n                            scope.searchIconsInactivate = 'checkOffColorIconFilter';\n                            delete scope.search.inactive;\n                        }\n                    },\n\n                    colorIconsTrash : function () {\n                        if (scope.searchIconsTrash === 'checkOffColorIconFilter') {\n                            scope.searchIconsTrash = 'checkOnColorIconFilter';\n                            scope.search.trash     = true;\n                        } else {\n                            scope.searchIconsTrash = 'checkOffColorIconFilter';\n                            delete scope.search.trash;\n                        }\n                    }\n                };\n\n                // defining template\n                builder.buildTemplate(scope, function (err, template) {\n\n                    // handling error\n                    if (err) {\n                        $log.warn(err);\n                        return;\n                    }\n\n                    // compiling template\n                    compiledElm = $compile(template)(scope);\n\n                    // handling post compile hooks\n                    if (builder.postCompile) {\n                        builder.postCompile(compiledElm);\n                    }\n\n                    // replacing into DOM\n                    element.replaceWith(compiledElm);\n\n                });\n            }\n        };\n    }\n\n    // injecting dependencies\n    PlgDataTableSearch.$inject = ['$log', '$compile', '$rootScope'];\n\n    // registering into angular\n    angular.module('plingUi').directive('plgDataTableSearch', PlgDataTableSearch);\n}());\n","/*global angular, $parse*/\n(function () {\n    \"use strict\";\n\n    angular.module('plingUi').directive('plgSetFocus', [ '$parse', '$timeout', function ($parse, $timeout) {\n\n        return {\n            restrict    : 'A',\n            replace     : true,\n            link        : function ($scope, element, attrs) {\n\n                var model = $parse(attrs.plgSetFocus);\n\n                $scope.$watch(model, function (value) {\n                    if (value === true) {\n                        $timeout(function () {\n                            element[0].focus();\n                        });\n                    }\n                });\n\n                element.bind('blur', function () {\n                    $scope.$apply(model.assign($scope, false));\n                });\n\n            }\n        };\n    }]);\n}());\n","/*global angular */\n(function () {\n    \"use strict\";\n\n    function PlgEditFabSpeedDial() {\n\n        return {\n            restrict    : 'E',\n            controller  : 'PlgEditFabSpeedDialController',\n            templateUrl : 'myComponentSample.html',\n            replace     : true,\n            link : function (scope) {\n                scope.tagline = \"it Works!\";\n            }\n        };\n\n    }\n\n    angular.module('plingUi').directive('plgEditFabSpeedDial', PlgEditFabSpeedDial);\n}());\n","/*global angular*/\n(function () {\n    'use strict';\n\n    angular.module('plingUi').service('cepService', ['$http', 'boot.options', function ($http, options) {\n\n        this.getCep = function (cep) {\n            var uri = options.cep_url + cep;\n            return $http.get(uri);\n        };\n\n    }]);\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    angular.module('plingUi').service('coreApiService', ['boot.options', function (options) {\n\n        var base_core_url = options.core_url + options.def_api_version + \"/\" + options.def_api_app + '/',\n            accounts_url  = options.accounts_url,\n            application_name = options.def_api_app;\n\n        // Returns Core API Service URL based on Current Application\n        this.getAppCoreUrl = function () {\n            return base_core_url;\n        };\n\n        this.getAccountsCoreUrl = function () {\n            return options.core_url + options.def_api_version + '/accounts/';\n        };\n\n        this.getDriveCoreUrl = function () {\n            return options.core_url + options.def_api_version + '/drive/';\n        };\n\n        // Returns Accounts URL\n        this.getAccountsUrl = function () {\n            return accounts_url;\n        };\n\n        // Returns Application name capitalizing the first letter with UpperCase\n        this.getApplicationName = function () {\n            return application_name.charAt(0).toUpperCase() + application_name.slice(1);\n\n        };\n\n    }]);\n}());\n","/*global window, angular*/\n(function (context, logger) {\n    'use strict';\n\n    // creating namespace\n    function Bootstrapper() {\n        this.isBootstrapped = false;\n    }\n\n    // boot a module\n    Bootstrapper.prototype.Angular = function (root, appname, source, cb) {\n        var self = this;\n\n        // loading file\n        context.loader.load(source, function (err, options) {\n            // checking errors...\n            if (err) {\n                logger.warn('Config file not loaded!');\n                logger.debug(err);\n\n            } else {\n                // saving boot settings\n                angular.module(appname).value('boot.options', options);\n            }\n\n            // starting app\n            angular.bootstrap(root, [appname]);\n            self.isBootstrapped = true;\n\n            // calling callback\n            if (cb) {\n                cb(err);\n            }\n        });\n    };\n\n    // creating instance\n    context.boot = new Bootstrapper();\n\n}(window.pling, window.console));\n","/*global document, window*/\n(function (dom, logger, context) {\n    \"use strict\";\n\n    // Content Loaded listener\n    function onDOMLoaded() {\n\n        // detect angular application \"directive\"\n        var root,\n            directive = \"plg-app\",\n            source = \"src\",\n            filter = \"[\" + directive + \"]\";\n\n        // retrieving root element\n        root = dom.querySelector(filter);\n\n        // working on root\n        if (root) {\n\n            // retrieving app name\n            context.name = root.getAttribute(directive);\n            context.source = root.getAttribute(source) || \"pling.conf.json\";\n\n            // loading config file\n            logger.info('AngularJS 1.x spa check:', true);\n            context.boot.Angular(root, context.name, context.source, function (err) {\n\n                if (err) {\n                    logger.error('Could not boot app ', context.name);\n                } else {\n                    logger.info('Bootstrapped:', context.boot.isBootstrapped);\n                }\n\n            });\n\n        } else {\n            logger.info('AngularJS 1.x spa check:', false);\n        }\n    }\n\n    dom.addEventListener('DOMContentLoaded', onDOMLoaded);\n\n}(document, window.console, window.pling));\n","/*global window, XMLHttpRequest*/\n(function (context) {\n    'use strict';\n    // creating namespace\n    function ConfLoader() {\n        this.settings = null;\n    }\n\n    // loading file\n    ConfLoader.prototype.load = function (filepath, cb) {\n        var self = this,\n            parsed,\n            xhr = new XMLHttpRequest();\n\n        // sending result\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n\n                    parsed = JSON.parse(xhr.responseText);\n                    self.settings = parsed;\n\n                    cb(null, parsed);\n                } else {\n                    cb(\"Error loading file - status \" + xhr.status, {});\n                }\n            }\n        };\n\n        // handling error\n        xhr.onerror = function (err) {\n            cb(err);\n        };\n\n        // fetching file\n        xhr.open(\"GET\", filepath, true);\n        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n        xhr.send();\n    };\n\n    // creating instance\n    context.loader = new ConfLoader();\n}(window.pling));\n","/*global angular */\n(function () {\n    'use strict';\n\n    function CachingService($templateCache, $route, $http) {\n\n\n        this.cacheViews = function (cacheObj, routeObj) {\n            // setting defaults\n            var partial, r,\n                viewCache = cacheObj || $templateCache,\n                router = routeObj || $route;\n\n            // looping routes\n            for (r in router.routes) {\n                // jslint -object protection\n                if (router.routes.hasOwnProperty(r)) {\n                    // evaluate partial\n                    partial = router.routes[r].templateUrl;\n                    if (partial) {\n                        // caching route\n                        $http.get(partial, {cache: viewCache});\n                    }\n                }\n            }\n        };\n    }\n\n    CachingService.$inject = ['$templateCache', '$route', '$http'];\n\n    // registering service\n    angular.module('plingUi').service('cacheService', CachingService);\n\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    angular.module('plingUi').service('$localstorage', ['$window', function ($window) {\n        return {\n            remove: function () {\n                $window.localStorage.clear();\n            },\n            set: function (key, value) {\n                $window.localStorage[key] = value;\n            },\n            get: function (key) {\n                return $window.localStorage[key];\n            },\n            setObject: function (key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n            getObject: function (key) {\n                return JSON.parse($window.localStorage[key] || '{}');\n            }\n        };\n    }]);\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    angular.module('plingUi').service('$sessionstorage', ['$window', function ($window) {\n        return {\n            remove: function () {\n                $window.sessionStorage.clear();\n            },\n            set: function (key, value) {\n                $window.sessionStorage[key] = value;\n            },\n            get: function (key) {\n                return $window.sessionStorage[key];\n            },\n            setObject: function (key, value) {\n                $window.sessionStorage[key] = JSON.stringify(value);\n            },\n            getObject: function (key) {\n                return JSON.parse($window.sessionStorage[key] || '{}');\n            }\n        };\n    }]);\n\n}());\n","/*global angular, console*/\n(function () {\n    \"use strict\";\n\n    // defining behaviour\n    function PlingUiExceptionHandler($injector) {\n\n        return function (exception, cause) {\n\n            // preparing message to be dispatched\n            var dispatcher = null,\n                logger = null,\n                data = {\n                    \"error\": exception,\n                    \"details\": cause\n                };\n\n            // logging\n            logger = $injector.get('$log');\n            logger.error(exception);\n\n            if (cause) {\n                logger.debug(cause);\n            }\n\n            // dispatching message\n            dispatcher = $injector.get('$rootScope');\n            dispatcher.$broadcast('PLINGUI_INTERNAL_ERROR', data);\n        };\n    }\n\n    // injecting\n    PlingUiExceptionHandler.$inject = ['$injector'];\n\n    // registering on angular\n    angular\n        .module(\"plingUi\")\n        .factory(\"$exceptionHandler\", PlingUiExceptionHandler);\n\n}());\n","/*global angular, console*/\n(function () {\n    \"use strict\";\n\n    // logger definition\n    function PlingUiLogger() {\n        return function ($delegate) {\n            return {\n                dispatch: function (method, params) {\n                    // defining method\n                    var proc = $delegate[method] || $delegate.log,\n                        stamp = new Date().toString(),\n                        prefix = '[' + stamp + '][' + method + ']::',\n                        msg = [],\n                        arg;\n\n                    if (method) {\n                        // preparing msg\n                        msg.push(prefix);\n\n                        // joining params\n                        for (arg in params) {\n                            if (params.hasOwnProperty(arg)) {\n                                msg.push(params[arg]);\n                            }\n                        }\n\n                        // applying log info\n                        proc.apply(null, msg);\n                    }\n                },\n\n                log: function () {\n                    this.dispatch('log', arguments);\n                },\n\n                info: function () {\n                    this.dispatch('info', arguments);\n                },\n\n                error: function () {\n                    this.dispatch('error', arguments);\n                },\n\n                warn: function () {\n                    this.dispatch('warn', arguments);\n                }\n            };\n        };\n    }\n\n    // registering on angular\n    angular\n        .module(\"plingUi\")\n        .factory(\"shadowLogger\", PlingUiLogger);\n}());\n","angular.module(\"plingUi.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"myComponentSample.html\",\"<div class=myComponentSample>My Component Sample: <span ng-bind=tagline></span></div>\");\n$templateCache.put(\"plgEditFabSpeedDial.template.html\",\"\");}]);"],"sourceRoot":"/source/"}