{"version":3,"sources":["main.js","app.module.js","core/apis/cep-service.js","core/apis/coreapi-service.js","core/boot/bootstrapper.js","core/boot/index.js","core/boot/loader.js","core/caching/caching-service.js","core/commons/localstorage-service.js","core/commons/sessionstorage-service.js","core/debugging/error-handler.js","core/debugging/logger.js","components/#template_demo/myComponentSample.js","components/plgEditFabSpeedDial/plgEditFabSpeedDial.js","components/plgSetFocus/plgSetFocus.js","app.templates.js"],"names":["context","pling","window","PlingUiConfig","$provide","decorator","$delegate","shadowLogger","PlingUiRun","options","$injector","cache","onRun","cacheViews","get","angular","module","config","run","service","$http","this","getCep","cep","uri","cep_url","base_core_url","core_url","def_api_version","def_api_app","accounts_url","application_name","getAppCoreUrl","getAccountsCoreUrl","getDriveCoreUrl","getAccountsUrl","getApplicationName","charAt","toUpperCase","slice","logger","Bootstrapper","isBootstrapped","prototype","Angular","root","appname","source","cb","self","loader","load","err","warn","debug","value","bootstrap","boot","console","dom","onDOMLoaded","directive","filter","querySelector","name","getAttribute","info","error","addEventListener","document","ConfLoader","settings","filepath","parsed","xhr","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","onerror","open","setRequestHeader","send","CachingService","$templateCache","$route","cacheObj","routeObj","partial","r","viewCache","router","routes","hasOwnProperty","templateUrl","$inject","$window","remove","localStorage","clear","set","key","setObject","stringify","getObject","sessionStorage","PlingUiExceptionHandler","exception","cause","dispatcher","data","details","$broadcast","factory","PlingUiLogger","dispatch","method","params","arg","proc","log","stamp","Date","toString","prefix","msg","push","apply","arguments","restrict","controller","link","$scope","element","attrs","css","tagline","PlgEditFabSpeedDial","replace","scope","$parse","$timeout","model","plgSetFocus","$watch","focus","bind","$apply","assign","put"],"mappings":"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","file":"pling-ui.min.js","sourcesContent":["/*global window*/\n(function (context) {\n    \"use strict\";\n\n    // starting global context\n    context.pling = {};\n}(window));\n","/*global angular */\n(function () {\n    \"use strict\";\n\n    // Config method\n    function PlingUiConfig($provide) {\n        $provide.decorator(\"$log\", function ($delegate, shadowLogger) {\n            return shadowLogger($delegate);\n        });\n    }\n\n    // Run method\n    function PlingUiRun(options, $injector) {\n        var cache = null;\n\n        if (options.onRun && options.onRun.cacheViews) {\n            cache = $injector.get(\"cacheService\");\n            cache.cacheViews();\n        }\n    }\n\n    // registering on angular\n    angular.module('plingUi', ['plingUi.templates', 'ngMaterial', 'datetime' ]);\n    angular.module(\"plingUi\").config([\"$provide\", PlingUiConfig]);\n    angular.module(\"plingUi\").run([\"boot.options\", \"$injector\", PlingUiRun]);\n}());\n","/*global angular*/\n(function () {\n    'use strict';\n\n    angular.module('plingUi').service('cepService', ['$http', 'boot.options', function ($http, options) {\n\n        this.getCep = function (cep) {\n            var uri = options.cep_url + cep;\n            return $http.get(uri);\n        };\n\n    }]);\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    angular.module('plingUi').service('coreApiService', ['boot.options', function (options) {\n\n        var base_core_url = options.core_url + options.def_api_version + \"/\" + options.def_api_app + '/',\n            accounts_url  = options.accounts_url,\n            application_name = options.def_api_app;\n\n        // Returns Core API Service URL based on Current Application\n        this.getAppCoreUrl = function () {\n            return base_core_url;\n        };\n\n        this.getAccountsCoreUrl = function () {\n            return options.core_url + options.def_api_version + '/accounts/';\n        };\n\n        this.getDriveCoreUrl = function () {\n            return options.core_url + options.def_api_version + '/drive/';\n        };\n\n        // Returns Accounts URL\n        this.getAccountsUrl = function () {\n            return accounts_url;\n        };\n\n        // Returns Application name capitalizing the first letter with UpperCase\n        this.getApplicationName = function () {\n            return application_name.charAt(0).toUpperCase() + application_name.slice(1);\n\n        };\n\n    }]);\n}());\n","/*global window, angular*/\n(function (context, logger) {\n    'use strict';\n\n    // creating namespace\n    function Bootstrapper() {\n        this.isBootstrapped = false;\n    }\n\n    // boot a module\n    Bootstrapper.prototype.Angular = function (root, appname, source, cb) {\n        var self = this;\n\n        // loading file\n        context.loader.load(source, function (err, options) {\n            // checking errors...\n            if (err) {\n                logger.warn('Config file not loaded!');\n                logger.debug(err);\n\n            } else {\n                // saving boot settings\n                angular.module(appname).value('boot.options', options);\n            }\n\n            // starting app\n            angular.bootstrap(root, [appname]);\n            self.isBootstrapped = true;\n\n            // calling callback\n            if (cb) {\n                cb(err);\n            }\n        });\n    };\n\n    // creating instance\n    context.boot = new Bootstrapper();\n\n}(window.pling, window.console));\n","/*global document, window*/\n(function (dom, logger, context) {\n    \"use strict\";\n\n    // Content Loaded listener\n    function onDOMLoaded() {\n\n        // detect angular application \"directive\"\n        var root,\n            directive = \"plg-app\",\n            source = \"src\",\n            filter = \"[\" + directive + \"]\";\n\n        // retrieving root element\n        root = dom.querySelector(filter);\n\n        // working on root\n        if (root) {\n\n            // retrieving app name\n            context.name = root.getAttribute(directive);\n            context.source = root.getAttribute(source) || \"pling.conf.json\";\n\n            // loading config file\n            logger.info('AngularJS 1.x spa check:', true);\n            context.boot.Angular(root, context.name, context.source, function (err) {\n\n                if (err) {\n                    logger.error('Could not boot app ', context.name);\n                } else {\n                    logger.info('Bootstrapped:', context.boot.isBootstrapped);\n                }\n\n            });\n\n        } else {\n            logger.info('AngularJS 1.x spa check:', false);\n        }\n    }\n\n    dom.addEventListener('DOMContentLoaded', onDOMLoaded);\n\n}(document, window.console, window.pling));\n","/*global window, XMLHttpRequest*/\n(function (context) {\n    'use strict';\n    // creating namespace\n    function ConfLoader() {\n        this.settings = null;\n    }\n\n    // loading file\n    ConfLoader.prototype.load = function (filepath, cb) {\n        var self = this,\n            parsed,\n            xhr = new XMLHttpRequest();\n\n        // sending result\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n\n                    parsed = JSON.parse(xhr.responseText);\n                    self.settings = parsed;\n\n                    cb(null, parsed);\n                } else {\n                    cb(\"Error loading file - status \" + xhr.status, {});\n                }\n            }\n        };\n\n        // handling error\n        xhr.onerror = function (err) {\n            cb(err);\n        };\n\n        // fetching file\n        xhr.open(\"GET\", filepath, true);\n        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n        xhr.send();\n    };\n\n    // creating instance\n    context.loader = new ConfLoader();\n}(window.pling));\n","/*global angular */\n(function () {\n    'use strict';\n\n    function CachingService($templateCache, $route, $http) {\n\n\n        this.cacheViews = function (cacheObj, routeObj) {\n            // setting defaults\n            var partial, r,\n                viewCache = cacheObj || $templateCache,\n                router = routeObj || $route;\n\n            // looping routes\n            for (r in router.routes) {\n                // jslint -object protection\n                if (router.routes.hasOwnProperty(r)) {\n                    // evaluate partial\n                    partial = router.routes[r].templateUrl;\n                    if (partial) {\n                        // caching route\n                        $http.get(partial, {cache: viewCache});\n                    }\n                }\n            }\n        };\n    }\n\n    CachingService.$inject = ['$templateCache', '$route', '$http'];\n\n    // registering service\n    angular.module('plingUi').service('cacheService', CachingService);\n\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    angular.module('plingUi').service('$localstorage', ['$window', function ($window) {\n        return {\n            remove: function () {\n                $window.localStorage.clear();\n            },\n            set: function (key, value) {\n                $window.localStorage[key] = value;\n            },\n            get: function (key) {\n                return $window.localStorage[key];\n            },\n            setObject: function (key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n            getObject: function (key) {\n                return JSON.parse($window.localStorage[key] || '{}');\n            }\n        };\n    }]);\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    angular.module('plingUi').service('$sessionstorage', ['$window', function ($window) {\n        return {\n            remove: function () {\n                $window.sessionStorage.clear();\n            },\n            set: function (key, value) {\n                $window.sessionStorage[key] = value;\n            },\n            get: function (key) {\n                return $window.sessionStorage[key];\n            },\n            setObject: function (key, value) {\n                $window.sessionStorage[key] = JSON.stringify(value);\n            },\n            getObject: function (key) {\n                return JSON.parse($window.sessionStorage[key] || '{}');\n            }\n        };\n    }]);\n\n}());\n","/*global angular, console*/\n(function () {\n    \"use strict\";\n\n    // defining behaviour\n    function PlingUiExceptionHandler($injector) {\n\n        return function (exception, cause) {\n\n            // preparing message to be dispatched\n            var dispatcher = null,\n                logger = null,\n                data = {\n                    \"error\": exception,\n                    \"details\": cause\n                };\n\n            // logging\n            logger = $injector.get('$log');\n            logger.error(exception);\n\n            if (cause) {\n                logger.debug(cause);\n            }\n\n            // dispatching message\n            dispatcher = $injector.get('$rootScope');\n            dispatcher.$broadcast('PLINGUI_INTERNAL_ERROR', data);\n        };\n    }\n\n    // injecting\n    PlingUiExceptionHandler.$inject = ['$injector'];\n\n    // registering on angular\n    angular\n        .module(\"plingUi\")\n        .factory(\"$exceptionHandler\", PlingUiExceptionHandler);\n\n}());\n","/*global angular, console*/\n(function () {\n    \"use strict\";\n\n    // logger definition\n    function PlingUiLogger() {\n        return function ($delegate) {\n            return {\n                dispatch: function (method, params) {\n                    // defining method\n                    var proc = $delegate[method] || $delegate.log,\n                        stamp = new Date().toString(),\n                        prefix = '[' + stamp + '][' + method + ']::',\n                        msg = [],\n                        arg;\n\n                    if (method) {\n                        // preparing msg\n                        msg.push(prefix);\n\n                        // joining params\n                        for (arg in params) {\n                            if (params.hasOwnProperty(arg)) {\n                                msg.push(params[arg]);\n                            }\n                        }\n\n                        // applying log info\n                        proc.apply(null, msg);\n                    }\n                },\n\n                log: function () {\n                    this.dispatch('log', arguments);\n                },\n\n                info: function () {\n                    this.dispatch('info', arguments);\n                },\n\n                error: function () {\n                    this.dispatch('error', arguments);\n                },\n\n                warn: function () {\n                    this.dispatch('warn', arguments);\n                }\n            };\n        };\n    }\n\n    // registering on angular\n    angular\n        .module(\"plingUi\")\n        .factory(\"shadowLogger\", PlingUiLogger);\n}());\n","/*global angular*/\n\n/* More about AngularJS Directives:\n    http://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-i-the-fundamentals */\n\n(function () {\n    \"use strict\";\n    /*\n        AQUI SE CRIA A DIRETIVA\n    */\n    angular.module('plingUi').directive('plgSample', function () {\n\n        return {\n\n            // E = element, A = attribute, C = class, M = comment\n            restrict    : 'E',\n\n            // Your Controller\n            controller  : 'MyController',\n\n            // Your HTML Template\n            // You can also use 'template': <div>{{yourScopeVar}}</div>' intead of 'templateUrl'\n            templateUrl : 'myComponentSample.html',\n\n            // DOM manipulation\n            link : function ($scope, element, attrs) {\n\n                element.css('background-color', 'white');\n                $scope.tagline = \"it Works! Attrs: \" + attrs;\n\n            }\n        };\n\n    });\n}());\n","/*global angular */\n(function () {\n    \"use strict\";\n\n    function PlgEditFabSpeedDial() {\n\n        return {\n            restrict    : 'E',\n            controller  : 'PlgEditFabSpeedDialController',\n            templateUrl : 'myComponentSample.html',\n            replace     : true,\n            link : function (scope) {\n                scope.tagline = \"it Works!\";\n            }\n        };\n\n    }\n\n    angular.module('plingUi').directive('plgEditFabSpeedDial', PlgEditFabSpeedDial);\n}());\n","/*global angular, $parse*/\n(function () {\n    \"use strict\";\n\n    angular.module('plingUi').directive('plgSetFocus', [ '$parse', '$timeout', function ($parse, $timeout) {\n\n        return {\n            restrict    : 'A',\n            replace     : true,\n            link        : function ($scope, element, attrs) {\n\n                var model = $parse(attrs.plgSetFocus);\n\n                $scope.$watch(model, function (value) {\n                    if (value === true) {\n                        $timeout(function () {\n                            element[0].focus();\n                        });\n                    }\n                });\n\n                element.bind('blur', function () {\n                    $scope.$apply(model.assign($scope, false));\n                });\n\n            }\n        };\n    }]);\n}());\n","angular.module(\"plingUi.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"myComponentSample.html\",\"<div class=myComponentSample>My Component Sample: <span ng-bind=tagline></span></div>\");\n$templateCache.put(\"plgEditFabSpeedDial.template.html\",\"\");}]);"],"sourceRoot":"/source/"}