{"version":3,"sources":["main.js","app.module.js","components/#template_demo/myComponentSample.js","components/plgDataTableSearch/plgDataTableSearch.js","components/plgDataTable/plgDataTable.js","components/plgDataTableFilters/plgDataTableFilters.js","components/plgEditFabSpeedDial/plgEditFabSpeedDial.js","components/plgSetFocus/plgSetFocus.js","core/apis/cep-service.js","core/apis/coreapi-service.js","core/boot/bootstrapper.js","core/boot/index.js","core/boot/loader.js","core/caching/caching-service.js","core/commons/localstorage-service.js","core/commons/sessionstorage-service.js","core/debugging/error-handler.js","core/debugging/logger.js","app.templates.js"],"names":["context","pling","window","PlingUiConfig","$provide","decorator","$delegate","shadowLogger","PlingUiRun","options","$injector","cache","onRun","cacheViews","get","angular","module","config","run","directive","restrict","controller","templateUrl","link","$scope","element","attrs","css","tagline","PlgDataTableSearch","$log","$compile","$rootScope","scope","dynamicForm","replace","builder","compiledElm","buildTemplate","cb","template","serializeQueryString","this","searchPeople","searchColorActive","searchColorInactivate","colorIconsTrash","search","searchIconsTrash","searchIconsActive","searchIconsInactivate","obj","p","str","hasOwnProperty","encodeURIComponent","push","length","join","$emit","active","inactive","trash","err","warn","postCompile","replaceWith","$inject","PlgDataTable","$location","$http","core","params","serviceModule","filterDefault","orderBy","limit","page","total","viewItems","gapiDataTableFilters","paginate","selected","chkList","editView","toggleAll","allActions","autoSelect","boundaryLinks","largeEditDialog","pageSelector","rowSelection","query","order","path","id","method","action","msg","payload","forEach","index","patch","getAppCoreUrl","collection","_id","success","data","PlgDataTableFilters","formatResultList","actionsList","subModuleEdit","resultViewItems","param","label","item","getParam","PlgEditFabSpeedDial","$parse","$timeout","model","plgSetFocus","$watch","value","focus","bind","$apply","assign","service","getCep","cep","uri","cep_url","base_core_url","core_url","def_api_version","def_api_app","accounts_url","login_url","application_name","getAccountsCoreUrl","getDriveCoreUrl","getAccountsUrl","getLoginUrl","getApplicationName","charAt","toUpperCase","slice","logger","Bootstrapper","isBootstrapped","prototype","Angular","root","appname","source","self","loader","load","debug","bootstrap","boot","console","dom","onDOMLoaded","filter","querySelector","name","getAttribute","info","error","addEventListener","document","ConfLoader","settings","filepath","parsed","xhr","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","onerror","open","setRequestHeader","send","CachingService","$templateCache","$route","cacheObj","routeObj","partial","r","viewCache","router","routes","$window","remove","localStorage","clear","set","key","setObject","stringify","getObject","sessionStorage","PlingUiExceptionHandler","exception","cause","dispatcher","details","$broadcast","factory","PlingUiLogger","dispatch","arg","proc","log","stamp","Date","toString","prefix","apply","arguments","put"],"mappings":"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","file":"pling-ui.min.js","sourcesContent":["/*global window*/\r\n(function (context) {\r\n    \"use strict\";\r\n\r\n    // starting global context\r\n    context.pling = {};\r\n}(window));\r\n","/*global angular */\r\n(function () {\r\n    \"use strict\";\r\n\r\n    // Config method\r\n    function PlingUiConfig($provide) {\r\n        $provide.decorator(\"$log\", function ($delegate, shadowLogger) {\r\n            return shadowLogger($delegate);\r\n        });\r\n    }\r\n\r\n    // Run method\r\n    function PlingUiRun(options, $injector) {\r\n        var cache = null;\r\n\r\n        if (options.onRun && options.onRun.cacheViews) {\r\n            cache = $injector.get(\"cacheService\");\r\n            cache.cacheViews();\r\n        }\r\n    }\r\n\r\n    // registering on angular\r\n    angular.module('plingUi', ['plingUi.templates', 'ngMaterial', 'datetime' ]);\r\n    angular.module(\"plingUi\").config([\"$provide\", PlingUiConfig]);\r\n    angular.module(\"plingUi\").run([\"boot.options\", \"$injector\", PlingUiRun]);\r\n}());\r\n","/*global angular*/\r\n\r\n/* More about AngularJS Directives:\r\n    http://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-i-the-fundamentals */\r\n\r\n(function () {\r\n    \"use strict\";\r\n    /*\r\n        AQUI SE CRIA A DIRETIVA\r\n    */\r\n    angular.module('plingUi').directive('plgSample', function () {\r\n\r\n        return {\r\n\r\n            // E = element, A = attribute, C = class, M = comment\r\n            restrict    : 'E',\r\n\r\n            // Your Controller\r\n            controller  : 'MyController',\r\n\r\n            // Your HTML Template\r\n            // You can also use 'template': <div>{{yourScopeVar}}</div>' intead of 'templateUrl'\r\n            templateUrl : 'myComponentSample.html',\r\n\r\n            // DOM manipulation\r\n            link : function ($scope, element, attrs) {\r\n\r\n                element.css('background-color', 'white');\r\n                $scope.tagline = \"it Works! Attrs: \" + attrs;\r\n\r\n            }\r\n        };\r\n\r\n    });\r\n}());\r\n","/*global angular, console, document, $, jQuery, window, URL*/\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgDataTableSearch($log, $compile, $rootScope) {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                dynamicForm: '='\r\n            },\r\n            replace: true,\r\n\r\n            // linking directive\r\n            link: function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                builder = {\r\n                    buildTemplate: function (scope, cb) {\r\n\r\n                        var template;\r\n\r\n                        scope.serializeQueryString  = this.serializeQueryString;\r\n                        scope.searchPeople          = this.searchPeople;\r\n                        scope.searchColorActive     = this.searchColorActive;\r\n                        scope.searchColorInactivate = this.searchColorInactivate;\r\n                        scope.colorIconsTrash       = this.colorIconsTrash;\r\n\r\n\r\n                        scope.search                   = [];\r\n                        scope.searchIconsTrash         = 'checkOffColorIconFilter';\r\n                        scope.searchIconsActive        = 'checkOffColorIconFilter';\r\n                        scope.searchIconsInactivate    = 'checkOffColorIconFilter';\r\n\r\n\r\n                        template =  '<div flex=\"25\">' +\r\n                                    '    <md-input-container>' +\r\n                                    '        <label>Pesquisar</label>' +\r\n                                    '        <input ng-model=\"search.search\">' +\r\n                                    '    </md-input-container>' +\r\n                                    '</div>' +\r\n\r\n                                    '<div style=\"margin-left: 20px !important\" flex=\"25\">' +\r\n                                    '    <md-input-container>' +\r\n                                    '        <md-select multiple ng-model=\"search.fieldtable\" placeholder=\"Selecione\">' +\r\n                                    '            <md-option ng-repeat=\"table in dynamicForm.allField\" value=\"{{table.ref}}\">{{table.label}}</md-option>' +\r\n                                    '        </md-select>' +\r\n                                    '    </md-input-container>' +\r\n                                    '</div>' +\r\n\r\n                                    '<div style=\"margin-left: 20px !important\">' +\r\n                                    '    <md-input-container>' +\r\n                                    '        <md-button ng-class=\"searchIconsActive\" class=\"md-icon-button\" ng-click=\"searchColorActive()\">' +\r\n                                    '            <md-tooltip md-direction=\"bottom\">Ativos</md-tooltip>' +\r\n                                    '            <i class=\"material-icons\">done_all</i>' +\r\n                                    '        </md-button>' +\r\n                                    '        <md-button ng-class=\"searchIconsInactivate\" class=\"md-icon-button\" ng-click=\"searchColorInactivate()\">' +\r\n                                    '            <md-tooltip md-direction=\"bottom\">Inativos</md-tooltip>' +\r\n                                    '            <i class=\"material-icons\">highlight_off</i>' +\r\n                                    '        </md-button>' +\r\n                                    '        <md-button ng-class=\"searchIconsTrash\" class=\"md-icon-button\" ng-click=\"colorIconsTrash()\">' +\r\n                                    '            <md-tooltip md-direction=\"bottom\">Excluídos</md-tooltip>' +\r\n                                    '            <i class=\"material-icons\">delete</i>' +\r\n                                    '        </md-button>' +\r\n                                    '    </md-input-container>' +\r\n                                    '</div>' +\r\n\r\n                                    '<md-button ng-click=\"searchPeople(search)\" ng-show=\"search.search || search.fieldtable.length > 0 || search.active || search.inactive || search.trash\" class=\"md-raised\" style=\"font-size: 11px !important;\">Pesquisar</md-button>';\r\n\r\n                        cb(null, template);\r\n                    },\r\n\r\n                    serializeQueryString : function (obj) {\r\n                        var str = [],\r\n                            p;\r\n\r\n                        for (p in obj) {\r\n                            if (obj.hasOwnProperty(p) && encodeURIComponent(obj[p])) {\r\n                                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\r\n                            }\r\n                        }\r\n\r\n                        if (str.length > 0) {\r\n                            return '&' + str.join(\"&\");\r\n                        }\r\n\r\n                        return str.join(\"&\");\r\n                    },\r\n\r\n                    searchPeople : function (search) {\r\n                        $rootScope.$emit('searchPeople', scope.serializeQueryString(search));\r\n                    },\r\n\r\n                    searchColorActive : function () {\r\n                        if (scope.searchIconsActive === 'checkOffColorIconFilter') {\r\n                            scope.searchIconsActive = 'checkOnColorIconFilter';\r\n                            scope.search.active     = true;\r\n                        } else {\r\n                            scope.searchIconsActive = 'checkOffColorIconFilter';\r\n                            delete scope.search.active;\r\n                        }\r\n                    },\r\n\r\n                    searchColorInactivate : function () {\r\n                        if (scope.searchIconsInactivate === 'checkOffColorIconFilter') {\r\n                            scope.searchIconsInactivate = 'checkOnColorIconFilter';\r\n                            scope.search.inactive       = true;\r\n                        } else {\r\n                            scope.searchIconsInactivate = 'checkOffColorIconFilter';\r\n                            delete scope.search.inactive;\r\n                        }\r\n                    },\r\n\r\n                    colorIconsTrash : function () {\r\n                        if (scope.searchIconsTrash === 'checkOffColorIconFilter') {\r\n                            scope.searchIconsTrash = 'checkOnColorIconFilter';\r\n                            scope.search.trash     = true;\r\n                        } else {\r\n                            scope.searchIconsTrash = 'checkOffColorIconFilter';\r\n                            delete scope.search.trash;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // defining template\r\n                builder.buildTemplate(scope, function (err, template) {\r\n\r\n                    // handling error\r\n                    if (err) {\r\n                        $log.warn(err);\r\n                        return;\r\n                    }\r\n\r\n                    // compiling template\r\n                    compiledElm = $compile(template)(scope);\r\n\r\n                    // handling post compile hooks\r\n                    if (builder.postCompile) {\r\n                        builder.postCompile(compiledElm);\r\n                    }\r\n\r\n                    // replacing into DOM\r\n                    element.replaceWith(compiledElm);\r\n\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgDataTableSearch.$inject = ['$log', '$compile', '$rootScope'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgDataTableSearch', PlgDataTableSearch);\r\n}());\r\n","/*global angular, console, document, $, window, URL*/\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgDataTable($log, $compile, $location, $http, $rootScope, core) {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                params: '=',\r\n                serviceModule: '=',\r\n                dynamicForm: '=',\r\n                filterDefault: '=',\r\n                orderBy: '=',\r\n                limit: '=',\r\n                page: '=',\r\n                total: '=',\r\n                viewItems: '=',\r\n                gapiDataTableFilters: '=',\r\n                paginate: '&'\r\n            },\r\n            replace: true,\r\n\r\n            // linking directive\r\n            link: function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.params) {\r\n                    builder = {\r\n                        buildTemplate: function (scope, cb) {\r\n                            var template;\r\n\r\n                            scope.selected  = []; // DataTable - Checkbox\r\n                            scope.chkList   = false;\r\n\r\n\r\n                            scope.editView      = this.editView;\r\n                            scope.toggleAll     = this.toggleAll;\r\n                            scope.allActions    = this.allActions;\r\n\r\n\r\n                            scope.options = {\r\n                                autoSelect: false,\r\n                                boundaryLinks: false,\r\n                                largeEditDialog: false,\r\n                                pageSelector: false,\r\n                                rowSelection: true\r\n                            };\r\n\r\n                            // input init orderBy... ex: name, type_ip, etc...\r\n                            scope.query = {\r\n                                order: scope.orderBy\r\n                            };\r\n\r\n\r\n                            template =  '<md-content layout=\"column\" flex>' +\r\n                                        '   <md-table-container>' +\r\n                                        '       <table md-table md-row-select=\"options.rowSelection\" ng-model=\"selected\" md-progress=\"promise\" ng-click=\"toggleAll()\">' +\r\n                                        '       <thead md-head md-order=\"query.order\" md-on-reorder=\"logOrder\">' +\r\n                                        '           <tr md-row>' +\r\n                                        '               <th md-column md-order-by=\"{{ header.ref }}\" ng-repeat=\"header in dynamicForm.showInList\"><span>{{ header.label }}</span></th>' +\r\n                                        '           </tr>' +\r\n                                        '       </thead>' +\r\n                                        '       <tbody md-body>' +\r\n                                        '           <tr md-row md-select=\"obj\" md-on-select=\"toggleAll\" md-on-deselect=\"toggleAll\" ng-click=\"editView(serviceModule.module, obj._id)\" md-on-select=\"logItem\" md-auto-select=\"options.autoSelect\" ng-repeat=\"obj in params | filter: filter.search | orderBy: query.order\" style=\"cursor: pointer !important\">' +\r\n                                        '               <td md-cell ng-repeat=\"item in dynamicForm.showInList\">{{obj[item.ref]}}</md-cell>' +\r\n                                        '               <td md-cell ng-show=\"gapiDataTableFilters\">' +\r\n\r\n                                        '                   <plg-data-table-filters' +\r\n                                        '                       params=\"obj\"' +\r\n                                        '                       service-module=\"serviceModule\"' +\r\n                                        '                       dynamic-form=\"dynamicForm\"' +\r\n                                        '                       filter-default=\"filterDefault\">' +\r\n                                        '                   </plg-data-table-filters>' +\r\n\r\n                                        '               </td>' +\r\n                                        '           </tr>' +\r\n                                        '       </tbody>' +\r\n                                        '       </table>' +\r\n                                        '   </md-table-container>' +\r\n\r\n                                        '   <md-table-pagination md-limit=\"limit\" md-page=\"page\" md-total=\"{{total}}\" md-on-paginate=\"paginate()\"></md-table-pagination>' +\r\n\r\n                                        '   <div layout=\"row\" layout-align=\"start start\" class=\"actionDataTable\">' +\r\n                                        '       <md-menu-item ng-show=\"chkList\" ng-repeat=\"item in viewItems\" layout-align=\"center center\">' +\r\n                                        '           <md-button class=\"md-icon-button allActionsIcon\" aria-label=\"Ações\" ng-click=\"allActions(item.method, item.action, item.msg)\">' +\r\n                                        '               <md-tooltip>{{item.name}}</md-tooltip>' +\r\n                                        '               <md-icon md-svg-src=\"{{item.moduleIcon}}\" class=\"icons\"></md-icon>' +\r\n                                        '           </md-button>' +\r\n                                        '       </md-menu-item>' +\r\n                                        '   </div>' +\r\n                                        '</md-content>';\r\n\r\n\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        editView : function (path, id) {\r\n                            $location.path(path + '/' + id);\r\n                        },\r\n\r\n                        // Display \"show / hide\" buttons, ex: Inativar, Excluir...\r\n                        toggleAll : function () {\r\n                            scope.chkList = false;\r\n                            if (scope.selected.length > 0) {\r\n                                scope.chkList = true;\r\n                            }\r\n                        },\r\n\r\n                        // Execute actions ex: Inativar, Excluir...\r\n                        allActions : function (method, action, msg) {\r\n\r\n                            var payload = {};\r\n\r\n                            payload[method] = action;\r\n\r\n\r\n                            scope.selected.forEach(function (obj, index) {\r\n                                /*jslint nomen:true*/\r\n                                $http.patch(core.getAppCoreUrl() + scope.serviceModule.collection + '/' + obj._id, payload)\r\n                                    .success(function (data) {\r\n                                        if (data) {\r\n                                            if (index + 1  === scope.selected.length) {\r\n                                                $rootScope.$emit('saveRecordSuccess', 'Registros ' + msg + ' com sucesso.');\r\n                                            }\r\n                                            scope.selected.length = 0; // Reset \"CHECKBOX checked\"\r\n                                            scope.chkList = false;\r\n                                            $rootScope.$emit('research', [obj], method, action);\r\n                                        } else {\r\n                                            $rootScope.$emit('recordError', 'Ocorreu um erro ao ' + msg);\r\n                                        }\r\n                                    });\r\n                                /*jslint nomen:false*/\r\n                            });\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgDataTable.$inject = ['$log', '$compile', '$location', '$http', '$rootScope', 'coreApiService'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgDataTable', PlgDataTable);\r\n}());","/*global angular, console, document, $, window, URL*/\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgDataTableFilters($rootScope, $log, $compile, $http, core, formatResultList) {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                params: '=',\r\n                serviceModule: '=',\r\n                dynamicForm: '=',\r\n                filterDefault: '='\r\n            },\r\n            replace: true,\r\n\r\n            // linking directive\r\n            link: function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.params) {\r\n                    builder = {\r\n                        buildTemplate: function (scope, cb) {\r\n                            var template;\r\n\r\n\r\n                            scope.actionsList = this.actionsList;\r\n\r\n\r\n                            //---------------------\r\n                            scope.collection    = scope.serviceModule.collection;\r\n                            scope.module        = scope.serviceModule.module;\r\n                            if (scope.serviceModule.subModuleEdit) {\r\n                                scope.module    = scope.serviceModule.module + '/' + scope.serviceModule.subModuleEdit;\r\n                            }\r\n\r\n                            scope.resultViewItems = formatResultList.action(scope.filterDefault.action, scope.serviceModule.viewItems);\r\n                            //---------------------\r\n\r\n                            template =  '<md-menu md-offset=\"0 -7\" md-position-mode=\"target-right target\">' +\r\n                                        '    <md-button aria-label=\"\" class=\"md-icon-button\" ng-click=\"$mdOpenMenu($event)\" >' +\r\n                                        '        <md-tooltip>Ações</md-tooltip>' +\r\n                                        '        <md-icon md-svg-src=\"assets/images/icone_mais.svg\"></md-icon>' +\r\n                                        '    </md-button>' +\r\n                                        '    <md-menu-content layout=\"column\" layout-wrap width=\"4\" >' +\r\n                                        '        <md-menu-item flex ng-show=\"module\">' +\r\n                                        '           <p><font color=\"#959595\">Alterar Status</font></p>' +\r\n                                        '        </md-menu-item>' +\r\n                                        '        <md-menu-item flex ng-repeat=\"item in resultViewItems\">' +\r\n                                        '            <md-button ng-click=\"actionsList(params, \\'Registro\\', item, collection)\" style=\"margin-left: 15px !important\">' +\r\n                                        '                 <md-icon md-svg-src=\"{{item.moduleIcon}}\"></md-icon>' +\r\n                                        '                 {{item.name}}' +\r\n                                        '            </md-button>' +\r\n                                        '        </md-menu-item>' +\r\n                                        '    </md-menu-content>' +\r\n                                        '</md-menu>';\r\n\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        actionsList: function (param, label, item, collection) {\r\n                            var payload = {},\r\n                                getParam;\r\n\r\n                            /*jslint nomen:true*/\r\n                            getParam                = param._id;\r\n                            /*jslint nomen:false*/\r\n                            payload[item.method]    = item.action;\r\n\r\n                            $http.patch(core.getAppCoreUrl() + collection + '/' + getParam, payload)\r\n                                .success(function (data) {\r\n                                    if (data) {\r\n                                        $rootScope.$emit('saveRecordSuccess', label + ' ' + item.msg + ' com sucesso.');\r\n                                        $rootScope.$emit('research', [param], item.method, item.action);\r\n                                    } else {\r\n                                        $rootScope.$emit('recordError', 'Ocorreu um erro ao ' + item.msg + ' ' + collection);\r\n                                    }\r\n                                });\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgDataTableFilters.$inject = ['$rootScope', '$log', '$compile', '$http', 'coreApiService', 'formatResultList'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgDataTableFilters', PlgDataTableFilters);\r\n}());\r\n","/*global angular */\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function PlgEditFabSpeedDial() {\r\n\r\n        return {\r\n            restrict    : 'E',\r\n            controller  : 'PlgEditFabSpeedDialController',\r\n            templateUrl : 'myComponentSample.html',\r\n            replace     : true,\r\n            link : function (scope) {\r\n                scope.tagline = \"it Works!\";\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    angular.module('plingUi').directive('plgEditFabSpeedDial', PlgEditFabSpeedDial);\r\n}());\r\n","/*global angular, $parse*/\r\n(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('plingUi').directive('plgSetFocus', [ '$parse', '$timeout', function ($parse, $timeout) {\r\n\r\n        return {\r\n            restrict    : 'A',\r\n            replace     : true,\r\n            link        : function ($scope, element, attrs) {\r\n\r\n                var model = $parse(attrs.plgSetFocus);\r\n\r\n                $scope.$watch(model, function (value) {\r\n                    if (value === true) {\r\n                        $timeout(function () {\r\n                            element[0].focus();\r\n                        });\r\n                    }\r\n                });\r\n\r\n                element.bind('blur', function () {\r\n                    $scope.$apply(model.assign($scope, false));\r\n                });\r\n\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n","/*global angular*/\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('plingUi').service('cepService', ['$http', 'boot.options', function ($http, options) {\r\n\r\n        this.getCep = function (cep) {\r\n            var uri = options.cep_url + cep;\r\n            return $http.get(uri);\r\n        };\r\n\r\n    }]);\r\n}());\r\n","/*global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('plingUi').service('coreApiService', ['boot.options', function (options) {\r\n\r\n        var\r\n            base_core_url    = options.core_url + options.def_api_version + \"/\" + options.def_api_app + '/',\r\n            accounts_url     = options.accounts_url,\r\n            login_url        = options.login_url,\r\n            application_name = options.def_api_app;\r\n\r\n        // Returns Core API Service URL based on Current Application\r\n        this.getAppCoreUrl = function () {\r\n            return base_core_url;\r\n        };\r\n\r\n        this.getAccountsCoreUrl = function () {\r\n            return options.core_url + options.def_api_version + '/accounts/';\r\n        };\r\n\r\n        this.getDriveCoreUrl = function () {\r\n            return options.core_url + options.def_api_version + '/drive/';\r\n        };\r\n\r\n        // Returns Accounts URL\r\n        this.getAccountsUrl = function () {\r\n            return accounts_url;\r\n        };\r\n\r\n        // Returns Login URL\r\n        this.getLoginUrl = function () {\r\n            return login_url;\r\n        };\r\n\r\n        // Returns Application name capitalizing the first letter with UpperCase\r\n        this.getApplicationName = function () {\r\n            return application_name.charAt(0).toUpperCase() + application_name.slice(1);\r\n\r\n        };\r\n\r\n    }]);\r\n}());\r\n","/*global window, angular*/\r\n(function (context, logger) {\r\n    'use strict';\r\n\r\n    // creating namespace\r\n    function Bootstrapper() {\r\n        this.isBootstrapped = false;\r\n    }\r\n\r\n    // boot a module\r\n    Bootstrapper.prototype.Angular = function (root, appname, source, cb) {\r\n        var self = this;\r\n\r\n        // loading file\r\n        context.loader.load(source, function (err, options) {\r\n            // checking errors...\r\n            if (err) {\r\n                logger.warn('Config file not loaded!');\r\n                logger.debug(err);\r\n\r\n            } else {\r\n                // saving boot settings\r\n                angular.module(appname).value('boot.options', options);\r\n            }\r\n\r\n            // starting app\r\n            angular.bootstrap(root, [appname]);\r\n            self.isBootstrapped = true;\r\n\r\n            // calling callback\r\n            if (cb) {\r\n                cb(err);\r\n            }\r\n        });\r\n    };\r\n\r\n    // creating instance\r\n    context.boot = new Bootstrapper();\r\n\r\n}(window.pling, window.console));\r\n","/*global document, window*/\r\n(function (dom, logger, context) {\r\n    \"use strict\";\r\n\r\n    // Content Loaded listener\r\n    function onDOMLoaded() {\r\n\r\n        // detect angular application \"directive\"\r\n        var root,\r\n            directive = \"plg-app\",\r\n            source = \"src\",\r\n            filter = \"[\" + directive + \"]\";\r\n\r\n        // retrieving root element\r\n        root = dom.querySelector(filter);\r\n\r\n        // working on root\r\n        if (root) {\r\n\r\n            // retrieving app name\r\n            context.name = root.getAttribute(directive);\r\n            context.source = root.getAttribute(source) || \"pling.conf.json\";\r\n\r\n            // loading config file\r\n            logger.info('AngularJS 1.x spa check:', true);\r\n            context.boot.Angular(root, context.name, context.source, function (err) {\r\n\r\n                if (err) {\r\n                    logger.error('Could not boot app ', context.name);\r\n                } else {\r\n                    logger.info('Bootstrapped:', context.boot.isBootstrapped);\r\n                }\r\n\r\n            });\r\n\r\n        } else {\r\n            logger.info('AngularJS 1.x spa check:', false);\r\n        }\r\n    }\r\n\r\n    dom.addEventListener('DOMContentLoaded', onDOMLoaded);\r\n\r\n}(document, window.console, window.pling));\r\n","/*global window, XMLHttpRequest*/\r\n(function (context) {\r\n    'use strict';\r\n    // creating namespace\r\n    function ConfLoader() {\r\n        this.settings = null;\r\n    }\r\n\r\n    // loading file\r\n    ConfLoader.prototype.load = function (filepath, cb) {\r\n        var self = this,\r\n            parsed,\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // sending result\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n\r\n                    parsed = JSON.parse(xhr.responseText);\r\n                    self.settings = parsed;\r\n\r\n                    cb(null, parsed);\r\n                } else {\r\n                    cb(\"Error loading file - status \" + xhr.status, {});\r\n                }\r\n            }\r\n        };\r\n\r\n        // handling error\r\n        xhr.onerror = function (err) {\r\n            cb(err);\r\n        };\r\n\r\n        // fetching file\r\n        xhr.open(\"GET\", filepath, true);\r\n        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n        xhr.send();\r\n    };\r\n\r\n    // creating instance\r\n    context.loader = new ConfLoader();\r\n}(window.pling));\r\n","/*global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    function CachingService($templateCache, $route, $http) {\r\n\r\n\r\n        this.cacheViews = function (cacheObj, routeObj) {\r\n            // setting defaults\r\n            var partial, r,\r\n                viewCache = cacheObj || $templateCache,\r\n                router = routeObj || $route;\r\n\r\n            // looping routes\r\n            for (r in router.routes) {\r\n                // jslint -object protection\r\n                if (router.routes.hasOwnProperty(r)) {\r\n                    // evaluate partial\r\n                    partial = router.routes[r].templateUrl;\r\n                    if (partial) {\r\n                        // caching route\r\n                        $http.get(partial, {cache: viewCache});\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    CachingService.$inject = ['$templateCache', '$route', '$http'];\r\n\r\n    // registering service\r\n    angular.module('plingUi').service('cacheService', CachingService);\r\n\r\n}());\r\n","/*global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('plingUi').service('$localstorage', ['$window', function ($window) {\r\n        return {\r\n            remove: function () {\r\n                $window.localStorage.clear();\r\n            },\r\n            set: function (key, value) {\r\n                $window.localStorage[key] = value;\r\n            },\r\n            get: function (key) {\r\n                return $window.localStorage[key];\r\n            },\r\n            setObject: function (key, value) {\r\n                $window.localStorage[key] = JSON.stringify(value);\r\n            },\r\n            getObject: function (key) {\r\n                return JSON.parse($window.localStorage[key] || '{}');\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n","/*global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('plingUi').service('$sessionstorage', ['$window', function ($window) {\r\n        return {\r\n            remove: function () {\r\n                $window.sessionStorage.clear();\r\n            },\r\n            set: function (key, value) {\r\n                $window.sessionStorage[key] = value;\r\n            },\r\n            get: function (key) {\r\n                return $window.sessionStorage[key];\r\n            },\r\n            setObject: function (key, value) {\r\n                $window.sessionStorage[key] = JSON.stringify(value);\r\n            },\r\n            getObject: function (key) {\r\n                return JSON.parse($window.sessionStorage[key] || '{}');\r\n            }\r\n        };\r\n    }]);\r\n\r\n}());\r\n","/*global angular, console*/\r\n(function () {\r\n    \"use strict\";\r\n\r\n    // defining behaviour\r\n    function PlingUiExceptionHandler($injector) {\r\n\r\n        return function (exception, cause) {\r\n\r\n            // preparing message to be dispatched\r\n            var dispatcher = null,\r\n                logger = null,\r\n                data = {\r\n                    \"error\": exception,\r\n                    \"details\": cause\r\n                };\r\n\r\n            // logging\r\n            logger = $injector.get('$log');\r\n            logger.error(exception);\r\n\r\n            if (cause) {\r\n                logger.debug(cause);\r\n            }\r\n\r\n            // dispatching message\r\n            dispatcher = $injector.get('$rootScope');\r\n            dispatcher.$broadcast('PLINGUI_INTERNAL_ERROR', data);\r\n        };\r\n    }\r\n\r\n    // injecting\r\n    PlingUiExceptionHandler.$inject = ['$injector'];\r\n\r\n    // registering on angular\r\n    angular\r\n        .module(\"plingUi\")\r\n        .factory(\"$exceptionHandler\", PlingUiExceptionHandler);\r\n\r\n}());\r\n","/*global angular, console*/\r\n(function () {\r\n    \"use strict\";\r\n\r\n    // logger definition\r\n    function PlingUiLogger() {\r\n        return function ($delegate) {\r\n            return {\r\n                dispatch: function (method, params) {\r\n                    // defining method\r\n                    var proc = $delegate[method] || $delegate.log,\r\n                        stamp = new Date().toString(),\r\n                        prefix = '[' + stamp + '][' + method + ']::',\r\n                        msg = [],\r\n                        arg;\r\n\r\n                    if (method) {\r\n                        // preparing msg\r\n                        msg.push(prefix);\r\n\r\n                        // joining params\r\n                        for (arg in params) {\r\n                            if (params.hasOwnProperty(arg)) {\r\n                                msg.push(params[arg]);\r\n                            }\r\n                        }\r\n\r\n                        // applying log info\r\n                        proc.apply(null, msg);\r\n                    }\r\n                },\r\n\r\n                log: function () {\r\n                    this.dispatch('log', arguments);\r\n                },\r\n\r\n                info: function () {\r\n                    this.dispatch('info', arguments);\r\n                },\r\n\r\n                error: function () {\r\n                    this.dispatch('error', arguments);\r\n                },\r\n\r\n                warn: function () {\r\n                    this.dispatch('warn', arguments);\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    // registering on angular\r\n    angular\r\n        .module(\"plingUi\")\r\n        .factory(\"shadowLogger\", PlingUiLogger);\r\n}());\r\n","angular.module(\"plingUi.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"myComponentSample.html\",\"<div class=myComponentSample>My Component Sample: <span ng-bind=tagline></span></div>\");\n$templateCache.put(\"plgEditFabSpeedDial.template.html\",\"\");}]);"],"sourceRoot":"/source/"}